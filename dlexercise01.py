# -*- coding: utf-8 -*-
"""DLexercise01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CPG3jEWbAmeacWRe8OYdbaRxTXIKrVTt

1. Take the Fashion MNIST data set and a suitable model architecture. Display the effect of the choice of the activation function, i.e., investigate different learning and generalization behavior if sgd or a modern activation function (e.g. relu, selu, ...) is used. Compare the behavior of at least three different acivation functions.
"""

# importing all the required libraries 

import tensorflow as tf
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import SGD
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt

#loading the fashion mnist data set
(training_images, training_labels), (test_images, test_labels) = fashion_mnist.load_data()

#printing sample label and image at random index
index = 5500

#to determine the way flaoting point number, arrays and other numoy objects are displayed.
np.set_printoptions(linewidth=320)

print(f'Label: {training_labels[index]}')
print(f'\n image pixel array \n: {training_images[index]}')

#visualize the image
plt.imshow(training_images[index])

# Normalize the pixel values of the train and test images
training_images  = training_images / 255.0
test_images = test_images / 255.0

#creating function for model architecture
def create_model(activation_function):
  model = Sequential([tf.keras.layers.Conv2D(64, (3,3), activation= activation_function, input_shape=(28, 28, 1)),
                      tf.keras.layers.MaxPooling2D(2, 2),
                      tf.keras.layers.Conv2D(64, (3,3), activation= activation_function),
                      tf.keras.layers.MaxPooling2D(2,2),
                      Flatten(input_shape= (28,28)),
                      Dense(128, activation = activation_function),
                      Dense(10, activation = 'softmax')])

  #model.compile(optimizer = SGD(), loss = 'sparse_categorical_crossentropy', metrics= ['accuracy'])
  model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
  return model



#This code will train and evaluate a simple neural network model for each of the activation functions (ReLU, SELU, and Tanh). 
#It will then plot the training and validation accuracy for each activation function against the number of epochs. 
#You can use the resulting plot to compare the learning and generalization behavior of each activation function.

#Activation functions to compare
activation_functions = ['relu', 'selu', 'tanh']

#Train and evaluate the models with different activation functions
histories = []
for activation_function in activation_functions:
  print(f"Training model with {activation_function} activation function...")
  model = create_model(activation_function)
  history = model.fit(training_images, training_labels, epochs = 10, validation_split = 0.2)
  test_loss , test_accuracy = model.evaluate(test_images, test_labels)
  print(f"Test accuracy: {test_accuracy}")
  histories.append(history)

#plot training and validate accuracy
plt.figure(figsize = (12,6))
for i, history in enumerate(histories):
  plt.plot(history.history['accuracy'], label = f"{activation_functions[i]} - Training accuracy")
  plt.plot(history.history['val_accuracy'], label=f"{activation_functions[i]} - Validation accuracy")

plt.title('Accuracy vs. Epochs for Different Activation Functions')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#cross checking prediction
classifications=model.predict(test_images)
print(classifications[1])
print(test_labels[1])

"""2. Take the same setup and the ADAM optimizer, display the result of the choice of different batch sizes for mini-batch training. Take at least three choices and shortly discuss the differences."""

#batch sizes to compare
batch_sizes = [32,64,128]

#train and evaluate the models with different batch sizes
histories_batch = []
for batch_size in batch_sizes:
  print(f"Training model with batch size {batch_size}...")
  model = create_model('relu')
  history = model.fit(training_images, training_labels, batch_size=batch_size, epochs=10, validation_split=0.2)
  test_loss, test_accuracy = model.evaluate(test_images, test_labels)
  print(f"Test accuracy: {test_accuracy}")
  histories_batch.append(history)

#to get summary of the model
model.summary()

# Plot training and validation accuracy for different batch sizes
plt.figure(figsize=(12, 6))
for i, history in enumerate(histories_batch):
    plt.plot(history.history['accuracy'], label=f"Batch size {batch_sizes[i]} - Training accuracy")
    plt.plot(history.history['val_accuracy'], label=f"Batch size {batch_sizes[i]} - Validation accuracy")

plt.title('Accuracy vs. Epochs for Different Batch Sizes')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()